generator client {
  provider = "prisma-client-js"
  output   = "./__generated__"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole @default(user)
  userName String
  picture String?
  status UserStatus @default(non_confirmed)
  courseName String[] @map("course_name")
  method AuthMethods
  stars Int @default(0)
  firstName String  @map("first_name")
  secondName String @map("second_name")
  fatherName String @map("father_name")

  accounts Account[]

  isVerified         Boolean @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean @default(false) @map("is_two_factor_enabled")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id String @id @default(uuid())

  type     String
  provider String

  refreshToken String? @map("refresh-token")
  accessToken  String? @map("access-token")
  expiresAt    Int     @map("expires-at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())

  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires-in")

  @@map("tokens")
}

model Courses {
  id String @id @default(uuid())
  name String @map("name")
  description String
  previewPath String
  lessons String[]
  status CourseStatuses @default(active)
  users String[]

  type CourseType
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model LandingPage {
  id        Int      @id @default(autoincrement())
  name      String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
}

model Lesson {
  id String @id @default(uuid())
  course String
  name String
  description String
  picture String
  video String
  homework String

  position Int
}

model History {
  userId String @id @map("user_id")
  success Boolean
  starsIncrease Int @map("start_increase")

  createdAt DateTime @default(now()) @map("created_at")
}

model Progress {
  userId String @id @map("user_id")
  game Games
  percent Int
}

enum CourseStatuses {
  active
  hidden
  deleted
  frozen
}

enum CourseType {
  online
  offline
}

enum Games {
  quickCount
  numberHunting
  mathChain
  comparisonOfExpressions
}

enum AuthMethods {
  credantials
  google
  yandex
}

enum UserRole {
  administrator
  user
  support
}

enum UserStatus {
  active
  non_confirmed
  blocked
  deleted
}

enum TokenType {
  verification
  two_factor
  password_reset
}

enum CourseNames {
  free
  newbie
  beginner
  amateur
  pro
}
